name: Update External Contributions

on:
  schedule:
    # Runs every day at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allows manual trigger

permissions:
  contents: write

jobs:
  update-contributions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Fetch external contributions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python << 'EOF'
          import requests
          import os
          from datetime import datetime

          username = "AndreaBozzo"
          token = os.getenv("GITHUB_TOKEN")

          headers = {
              "Authorization": f"token {token}",
              "Accept": "application/vnd.github.v3+json"
          }

          # Get all user's pull requests
          pr_url = f"https://api.github.com/search/issues?q=author:{username}+type:pr+is:merged+-user:{username}&sort=updated&per_page=100"

          try:
              response = requests.get(pr_url, headers=headers)
              response.raise_for_status()
              prs = response.json().get("items", [])

              # Group PRs by repository
              repo_contributions = {}
              for pr in prs:
                  repo_url = pr["repository_url"]
                  repo_info = requests.get(repo_url, headers=headers).json()
                  repo_full_name = repo_info["full_name"]

                  if repo_full_name not in repo_contributions:
                      repo_contributions[repo_full_name] = {
                          "count": 0,
                          "url": repo_info["html_url"],
                          "description": repo_info.get("description", ""),
                          "stars": repo_info["stargazers_count"]
                      }
                  repo_contributions[repo_full_name]["count"] += 1

              # Sort by stars (popularity)
              sorted_repos = sorted(
                  repo_contributions.items(),
                  key=lambda x: x[1]["stars"],
                  reverse=True
              )[:10]  # Top 10

              # Generate markdown
              markdown = ""
              if sorted_repos:
                  for repo_name, info in sorted_repos:
                      markdown += f"- **[{repo_name}]({info['url']})** "
                      markdown += f"⭐ {info['stars']} - "
                      markdown += f"{info['count']} merged PR{'s' if info['count'] > 1 else ''}\n"
                      if info['description']:
                          markdown += f"  - {info['description']}\n"
              else:
                  markdown = "Currently building my contribution portfolio! Check back soon.\n"

              # Read current README
              with open("README.md", "r", encoding="utf-8") as f:
                  content = f.read()

              # Replace content between markers
              start_marker = "<!-- EXTERNAL_CONTRIBUTIONS:START -->"
              end_marker = "<!-- EXTERNAL_CONTRIBUTIONS:END -->"

              start_idx = content.find(start_marker) + len(start_marker)
              end_idx = content.find(end_marker)

              if start_idx > len(start_marker) and end_idx > -1:
                  new_content = (
                      content[:start_idx] +
                      f"\n{markdown}" +
                      content[end_idx:]
                  )

                  with open("README.md", "w", encoding="utf-8") as f:
                      f.write(new_content)

                  print("✅ README updated successfully!")
              else:
                  print("❌ Could not find markers in README")

          except Exception as e:
              print(f"❌ Error: {e}")
              # Don't fail the workflow, just log the error

          EOF

      - name: Commit and push if changed
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md
          git diff --quiet && git diff --staged --quiet || (git commit -m "docs: update external contributions [skip ci]" && git push)
